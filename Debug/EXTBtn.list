
EXTBtn.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d74  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000efc  08000efc  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000efc  08000efc  00010efc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000f00  08000f00  00010f00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08000f04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
  7 .bss          00000020  20000004  20000004  00020004  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000024  20000024  00020004  2**0
                  ALLOC
  9 .ARM.attributes 0000002a  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 10 .debug_info   00004b98  00000000  00000000  0002002e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000d29  00000000  00000000  00024bc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000700  00000000  00000000  000258f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000668  00000000  00000000  00025ff0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000231f  00000000  00000000  00026658  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002333  00000000  00000000  00028977  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0002acaa  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001da4  00000000  00000000  0002ad28  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  0002cacc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000ee4 	.word	0x08000ee4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08000ee4 	.word	0x08000ee4

080001c8 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80001d0:	2300      	movs	r3, #0
 80001d2:	73fb      	strb	r3, [r7, #15]
 80001d4:	2300      	movs	r3, #0
 80001d6:	73bb      	strb	r3, [r7, #14]
 80001d8:	230f      	movs	r3, #15
 80001da:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	78db      	ldrb	r3, [r3, #3]
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d039      	beq.n	8000258 <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80001e4:	4b27      	ldr	r3, [pc, #156]	; (8000284 <NVIC_Init+0xbc>)
 80001e6:	68db      	ldr	r3, [r3, #12]
 80001e8:	43db      	mvns	r3, r3
 80001ea:	0a1b      	lsrs	r3, r3, #8
 80001ec:	b2db      	uxtb	r3, r3
 80001ee:	f003 0307 	and.w	r3, r3, #7
 80001f2:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 80001f4:	7bfb      	ldrb	r3, [r7, #15]
 80001f6:	f1c3 0304 	rsb	r3, r3, #4
 80001fa:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 80001fc:	7b7a      	ldrb	r2, [r7, #13]
 80001fe:	7bfb      	ldrb	r3, [r7, #15]
 8000200:	fa42 f303 	asr.w	r3, r2, r3
 8000204:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	785b      	ldrb	r3, [r3, #1]
 800020a:	461a      	mov	r2, r3
 800020c:	7bbb      	ldrb	r3, [r7, #14]
 800020e:	fa02 f303 	lsl.w	r3, r2, r3
 8000212:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	789a      	ldrb	r2, [r3, #2]
 8000218:	7b7b      	ldrb	r3, [r7, #13]
 800021a:	4013      	ands	r3, r2
 800021c:	b2da      	uxtb	r2, r3
 800021e:	7bfb      	ldrb	r3, [r7, #15]
 8000220:	4313      	orrs	r3, r2
 8000222:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000224:	7bfb      	ldrb	r3, [r7, #15]
 8000226:	011b      	lsls	r3, r3, #4
 8000228:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800022a:	4a17      	ldr	r2, [pc, #92]	; (8000288 <NVIC_Init+0xc0>)
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	781b      	ldrb	r3, [r3, #0]
 8000230:	4413      	add	r3, r2
 8000232:	7bfa      	ldrb	r2, [r7, #15]
 8000234:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000238:	4a13      	ldr	r2, [pc, #76]	; (8000288 <NVIC_Init+0xc0>)
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	781b      	ldrb	r3, [r3, #0]
 800023e:	095b      	lsrs	r3, r3, #5
 8000240:	b2db      	uxtb	r3, r3
 8000242:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	781b      	ldrb	r3, [r3, #0]
 8000248:	f003 031f 	and.w	r3, r3, #31
 800024c:	2101      	movs	r1, #1
 800024e:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000252:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000256:	e00f      	b.n	8000278 <NVIC_Init+0xb0>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000258:	490b      	ldr	r1, [pc, #44]	; (8000288 <NVIC_Init+0xc0>)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	781b      	ldrb	r3, [r3, #0]
 800025e:	095b      	lsrs	r3, r3, #5
 8000260:	b2db      	uxtb	r3, r3
 8000262:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	f003 031f 	and.w	r3, r3, #31
 800026c:	2201      	movs	r2, #1
 800026e:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000270:	f100 0320 	add.w	r3, r0, #32
 8000274:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000278:	bf00      	nop
 800027a:	3714      	adds	r7, #20
 800027c:	46bd      	mov	sp, r7
 800027e:	bc80      	pop	{r7}
 8000280:	4770      	bx	lr
 8000282:	bf00      	nop
 8000284:	e000ed00 	.word	0xe000ed00
 8000288:	e000e100 	.word	0xe000e100

0800028c <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 800028c:	b480      	push	{r7}
 800028e:	b085      	sub	sp, #20
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8000294:	2300      	movs	r3, #0
 8000296:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 8000298:	4b34      	ldr	r3, [pc, #208]	; (800036c <EXTI_Init+0xe0>)
 800029a:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	799b      	ldrb	r3, [r3, #6]
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d04f      	beq.n	8000344 <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 80002a4:	4931      	ldr	r1, [pc, #196]	; (800036c <EXTI_Init+0xe0>)
 80002a6:	4b31      	ldr	r3, [pc, #196]	; (800036c <EXTI_Init+0xe0>)
 80002a8:	681a      	ldr	r2, [r3, #0]
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	43db      	mvns	r3, r3
 80002b0:	4013      	ands	r3, r2
 80002b2:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 80002b4:	492d      	ldr	r1, [pc, #180]	; (800036c <EXTI_Init+0xe0>)
 80002b6:	4b2d      	ldr	r3, [pc, #180]	; (800036c <EXTI_Init+0xe0>)
 80002b8:	685a      	ldr	r2, [r3, #4]
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	43db      	mvns	r3, r3
 80002c0:	4013      	ands	r3, r2
 80002c2:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	791b      	ldrb	r3, [r3, #4]
 80002c8:	461a      	mov	r2, r3
 80002ca:	68fb      	ldr	r3, [r7, #12]
 80002cc:	4413      	add	r3, r2
 80002ce:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	68fa      	ldr	r2, [r7, #12]
 80002d4:	6811      	ldr	r1, [r2, #0]
 80002d6:	687a      	ldr	r2, [r7, #4]
 80002d8:	6812      	ldr	r2, [r2, #0]
 80002da:	430a      	orrs	r2, r1
 80002dc:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 80002de:	4923      	ldr	r1, [pc, #140]	; (800036c <EXTI_Init+0xe0>)
 80002e0:	4b22      	ldr	r3, [pc, #136]	; (800036c <EXTI_Init+0xe0>)
 80002e2:	689a      	ldr	r2, [r3, #8]
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	43db      	mvns	r3, r3
 80002ea:	4013      	ands	r3, r2
 80002ec:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 80002ee:	491f      	ldr	r1, [pc, #124]	; (800036c <EXTI_Init+0xe0>)
 80002f0:	4b1e      	ldr	r3, [pc, #120]	; (800036c <EXTI_Init+0xe0>)
 80002f2:	68da      	ldr	r2, [r3, #12]
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	43db      	mvns	r3, r3
 80002fa:	4013      	ands	r3, r2
 80002fc:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	795b      	ldrb	r3, [r3, #5]
 8000302:	2b10      	cmp	r3, #16
 8000304:	d10e      	bne.n	8000324 <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8000306:	4919      	ldr	r1, [pc, #100]	; (800036c <EXTI_Init+0xe0>)
 8000308:	4b18      	ldr	r3, [pc, #96]	; (800036c <EXTI_Init+0xe0>)
 800030a:	689a      	ldr	r2, [r3, #8]
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	4313      	orrs	r3, r2
 8000312:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8000314:	4915      	ldr	r1, [pc, #84]	; (800036c <EXTI_Init+0xe0>)
 8000316:	4b15      	ldr	r3, [pc, #84]	; (800036c <EXTI_Init+0xe0>)
 8000318:	68da      	ldr	r2, [r3, #12]
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	4313      	orrs	r3, r2
 8000320:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 8000322:	e01d      	b.n	8000360 <EXTI_Init+0xd4>
      tmp = (uint32_t)EXTI_BASE;
 8000324:	4b11      	ldr	r3, [pc, #68]	; (800036c <EXTI_Init+0xe0>)
 8000326:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	795b      	ldrb	r3, [r3, #5]
 800032c:	461a      	mov	r2, r3
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	4413      	add	r3, r2
 8000332:	60fb      	str	r3, [r7, #12]
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000334:	68fb      	ldr	r3, [r7, #12]
 8000336:	68fa      	ldr	r2, [r7, #12]
 8000338:	6811      	ldr	r1, [r2, #0]
 800033a:	687a      	ldr	r2, [r7, #4]
 800033c:	6812      	ldr	r2, [r2, #0]
 800033e:	430a      	orrs	r2, r1
 8000340:	601a      	str	r2, [r3, #0]
}
 8000342:	e00d      	b.n	8000360 <EXTI_Init+0xd4>
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	791b      	ldrb	r3, [r3, #4]
 8000348:	461a      	mov	r2, r3
 800034a:	68fb      	ldr	r3, [r7, #12]
 800034c:	4413      	add	r3, r2
 800034e:	60fb      	str	r3, [r7, #12]
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8000350:	68fb      	ldr	r3, [r7, #12]
 8000352:	68fa      	ldr	r2, [r7, #12]
 8000354:	6811      	ldr	r1, [r2, #0]
 8000356:	687a      	ldr	r2, [r7, #4]
 8000358:	6812      	ldr	r2, [r2, #0]
 800035a:	43d2      	mvns	r2, r2
 800035c:	400a      	ands	r2, r1
 800035e:	601a      	str	r2, [r3, #0]
}
 8000360:	bf00      	nop
 8000362:	3714      	adds	r7, #20
 8000364:	46bd      	mov	sp, r7
 8000366:	bc80      	pop	{r7}
 8000368:	4770      	bx	lr
 800036a:	bf00      	nop
 800036c:	40013c00 	.word	0x40013c00

08000370 <EXTI_GetITStatus>:
  * @param  EXTI_Line: specifies the EXTI line to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 8000370:	b480      	push	{r7}
 8000372:	b085      	sub	sp, #20
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8000378:	2300      	movs	r3, #0
 800037a:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 800037c:	2300      	movs	r3, #0
 800037e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 8000380:	4b0c      	ldr	r3, [pc, #48]	; (80003b4 <EXTI_GetITStatus+0x44>)
 8000382:	681a      	ldr	r2, [r3, #0]
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	4013      	ands	r3, r2
 8000388:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 800038a:	4b0a      	ldr	r3, [pc, #40]	; (80003b4 <EXTI_GetITStatus+0x44>)
 800038c:	695a      	ldr	r2, [r3, #20]
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	4013      	ands	r3, r2
 8000392:	2b00      	cmp	r3, #0
 8000394:	d005      	beq.n	80003a2 <EXTI_GetITStatus+0x32>
 8000396:	68bb      	ldr	r3, [r7, #8]
 8000398:	2b00      	cmp	r3, #0
 800039a:	d002      	beq.n	80003a2 <EXTI_GetITStatus+0x32>
  {
    bitstatus = SET;
 800039c:	2301      	movs	r3, #1
 800039e:	73fb      	strb	r3, [r7, #15]
 80003a0:	e001      	b.n	80003a6 <EXTI_GetITStatus+0x36>
  }
  else
  {
    bitstatus = RESET;
 80003a2:	2300      	movs	r3, #0
 80003a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80003a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80003a8:	4618      	mov	r0, r3
 80003aa:	3714      	adds	r7, #20
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bc80      	pop	{r7}
 80003b0:	4770      	bx	lr
 80003b2:	bf00      	nop
 80003b4:	40013c00 	.word	0x40013c00

080003b8 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 80003b8:	b480      	push	{r7}
 80003ba:	b083      	sub	sp, #12
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 80003c0:	4a03      	ldr	r2, [pc, #12]	; (80003d0 <EXTI_ClearITPendingBit+0x18>)
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	6153      	str	r3, [r2, #20]
}
 80003c6:	bf00      	nop
 80003c8:	370c      	adds	r7, #12
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bc80      	pop	{r7}
 80003ce:	4770      	bx	lr
 80003d0:	40013c00 	.word	0x40013c00

080003d4 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80003d4:	b480      	push	{r7}
 80003d6:	b087      	sub	sp, #28
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
 80003dc:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80003de:	2300      	movs	r3, #0
 80003e0:	617b      	str	r3, [r7, #20]
 80003e2:	2300      	movs	r3, #0
 80003e4:	613b      	str	r3, [r7, #16]
 80003e6:	2300      	movs	r3, #0
 80003e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80003ea:	2300      	movs	r3, #0
 80003ec:	617b      	str	r3, [r7, #20]
 80003ee:	e076      	b.n	80004de <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80003f0:	2201      	movs	r2, #1
 80003f2:	697b      	ldr	r3, [r7, #20]
 80003f4:	fa02 f303 	lsl.w	r3, r2, r3
 80003f8:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80003fa:	683b      	ldr	r3, [r7, #0]
 80003fc:	681a      	ldr	r2, [r3, #0]
 80003fe:	693b      	ldr	r3, [r7, #16]
 8000400:	4013      	ands	r3, r2
 8000402:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000404:	68fa      	ldr	r2, [r7, #12]
 8000406:	693b      	ldr	r3, [r7, #16]
 8000408:	429a      	cmp	r2, r3
 800040a:	d165      	bne.n	80004d8 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	681a      	ldr	r2, [r3, #0]
 8000410:	697b      	ldr	r3, [r7, #20]
 8000412:	005b      	lsls	r3, r3, #1
 8000414:	2103      	movs	r1, #3
 8000416:	fa01 f303 	lsl.w	r3, r1, r3
 800041a:	43db      	mvns	r3, r3
 800041c:	401a      	ands	r2, r3
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	681a      	ldr	r2, [r3, #0]
 8000426:	683b      	ldr	r3, [r7, #0]
 8000428:	791b      	ldrb	r3, [r3, #4]
 800042a:	4619      	mov	r1, r3
 800042c:	697b      	ldr	r3, [r7, #20]
 800042e:	005b      	lsls	r3, r3, #1
 8000430:	fa01 f303 	lsl.w	r3, r1, r3
 8000434:	431a      	orrs	r2, r3
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800043a:	683b      	ldr	r3, [r7, #0]
 800043c:	791b      	ldrb	r3, [r3, #4]
 800043e:	2b01      	cmp	r3, #1
 8000440:	d003      	beq.n	800044a <GPIO_Init+0x76>
 8000442:	683b      	ldr	r3, [r7, #0]
 8000444:	791b      	ldrb	r3, [r3, #4]
 8000446:	2b02      	cmp	r3, #2
 8000448:	d12e      	bne.n	80004a8 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	689a      	ldr	r2, [r3, #8]
 800044e:	697b      	ldr	r3, [r7, #20]
 8000450:	005b      	lsls	r3, r3, #1
 8000452:	2103      	movs	r1, #3
 8000454:	fa01 f303 	lsl.w	r3, r1, r3
 8000458:	43db      	mvns	r3, r3
 800045a:	401a      	ands	r2, r3
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	689a      	ldr	r2, [r3, #8]
 8000464:	683b      	ldr	r3, [r7, #0]
 8000466:	795b      	ldrb	r3, [r3, #5]
 8000468:	4619      	mov	r1, r3
 800046a:	697b      	ldr	r3, [r7, #20]
 800046c:	005b      	lsls	r3, r3, #1
 800046e:	fa01 f303 	lsl.w	r3, r1, r3
 8000472:	431a      	orrs	r2, r3
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	685a      	ldr	r2, [r3, #4]
 800047c:	697b      	ldr	r3, [r7, #20]
 800047e:	b29b      	uxth	r3, r3
 8000480:	4619      	mov	r1, r3
 8000482:	2301      	movs	r3, #1
 8000484:	408b      	lsls	r3, r1
 8000486:	43db      	mvns	r3, r3
 8000488:	401a      	ands	r2, r3
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	685b      	ldr	r3, [r3, #4]
 8000492:	683a      	ldr	r2, [r7, #0]
 8000494:	7992      	ldrb	r2, [r2, #6]
 8000496:	4611      	mov	r1, r2
 8000498:	697a      	ldr	r2, [r7, #20]
 800049a:	b292      	uxth	r2, r2
 800049c:	fa01 f202 	lsl.w	r2, r1, r2
 80004a0:	b292      	uxth	r2, r2
 80004a2:	431a      	orrs	r2, r3
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	68da      	ldr	r2, [r3, #12]
 80004ac:	697b      	ldr	r3, [r7, #20]
 80004ae:	b29b      	uxth	r3, r3
 80004b0:	005b      	lsls	r3, r3, #1
 80004b2:	2103      	movs	r1, #3
 80004b4:	fa01 f303 	lsl.w	r3, r1, r3
 80004b8:	43db      	mvns	r3, r3
 80004ba:	401a      	ands	r2, r3
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	68da      	ldr	r2, [r3, #12]
 80004c4:	683b      	ldr	r3, [r7, #0]
 80004c6:	79db      	ldrb	r3, [r3, #7]
 80004c8:	4619      	mov	r1, r3
 80004ca:	697b      	ldr	r3, [r7, #20]
 80004cc:	005b      	lsls	r3, r3, #1
 80004ce:	fa01 f303 	lsl.w	r3, r1, r3
 80004d2:	431a      	orrs	r2, r3
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80004d8:	697b      	ldr	r3, [r7, #20]
 80004da:	3301      	adds	r3, #1
 80004dc:	617b      	str	r3, [r7, #20]
 80004de:	697b      	ldr	r3, [r7, #20]
 80004e0:	2b0f      	cmp	r3, #15
 80004e2:	d985      	bls.n	80003f0 <GPIO_Init+0x1c>
    }
  }
}
 80004e4:	bf00      	nop
 80004e6:	371c      	adds	r7, #28
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bc80      	pop	{r7}
 80004ec:	4770      	bx	lr

080004ee <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *          This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80004ee:	b480      	push	{r7}
 80004f0:	b085      	sub	sp, #20
 80004f2:	af00      	add	r7, sp, #0
 80004f4:	6078      	str	r0, [r7, #4]
 80004f6:	460b      	mov	r3, r1
 80004f8:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 80004fa:	2300      	movs	r3, #0
 80004fc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if (((GPIOx->ODR) & GPIO_Pin) != (uint32_t)Bit_RESET)
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	695a      	ldr	r2, [r3, #20]
 8000502:	887b      	ldrh	r3, [r7, #2]
 8000504:	4013      	ands	r3, r2
 8000506:	2b00      	cmp	r3, #0
 8000508:	d002      	beq.n	8000510 <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 800050a:	2301      	movs	r3, #1
 800050c:	73fb      	strb	r3, [r7, #15]
 800050e:	e001      	b.n	8000514 <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8000510:	2300      	movs	r3, #0
 8000512:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000514:	7bfb      	ldrb	r3, [r7, #15]
}
 8000516:	4618      	mov	r0, r3
 8000518:	3714      	adds	r7, #20
 800051a:	46bd      	mov	sp, r7
 800051c:	bc80      	pop	{r7}
 800051e:	4770      	bx	lr

08000520 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000520:	b480      	push	{r7}
 8000522:	b083      	sub	sp, #12
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
 8000528:	460b      	mov	r3, r1
 800052a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	887a      	ldrh	r2, [r7, #2]
 8000530:	831a      	strh	r2, [r3, #24]
}
 8000532:	bf00      	nop
 8000534:	370c      	adds	r7, #12
 8000536:	46bd      	mov	sp, r7
 8000538:	bc80      	pop	{r7}
 800053a:	4770      	bx	lr

0800053c <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800053c:	b480      	push	{r7}
 800053e:	b083      	sub	sp, #12
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
 8000544:	460b      	mov	r3, r1
 8000546:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	887a      	ldrh	r2, [r7, #2]
 800054c:	835a      	strh	r2, [r3, #26]
}
 800054e:	bf00      	nop
 8000550:	370c      	adds	r7, #12
 8000552:	46bd      	mov	sp, r7
 8000554:	bc80      	pop	{r7}
 8000556:	4770      	bx	lr

08000558 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000558:	b480      	push	{r7}
 800055a:	b083      	sub	sp, #12
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
 8000560:	460b      	mov	r3, r1
 8000562:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000564:	78fb      	ldrb	r3, [r7, #3]
 8000566:	2b00      	cmp	r3, #0
 8000568:	d006      	beq.n	8000578 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800056a:	4909      	ldr	r1, [pc, #36]	; (8000590 <RCC_AHB1PeriphClockCmd+0x38>)
 800056c:	4b08      	ldr	r3, [pc, #32]	; (8000590 <RCC_AHB1PeriphClockCmd+0x38>)
 800056e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	4313      	orrs	r3, r2
 8000574:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8000576:	e006      	b.n	8000586 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000578:	4905      	ldr	r1, [pc, #20]	; (8000590 <RCC_AHB1PeriphClockCmd+0x38>)
 800057a:	4b05      	ldr	r3, [pc, #20]	; (8000590 <RCC_AHB1PeriphClockCmd+0x38>)
 800057c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	43db      	mvns	r3, r3
 8000582:	4013      	ands	r3, r2
 8000584:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000586:	bf00      	nop
 8000588:	370c      	adds	r7, #12
 800058a:	46bd      	mov	sp, r7
 800058c:	bc80      	pop	{r7}
 800058e:	4770      	bx	lr
 8000590:	40023800 	.word	0x40023800

08000594 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
 800059c:	460b      	mov	r3, r1
 800059e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80005a0:	78fb      	ldrb	r3, [r7, #3]
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d006      	beq.n	80005b4 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80005a6:	4909      	ldr	r1, [pc, #36]	; (80005cc <RCC_APB1PeriphClockCmd+0x38>)
 80005a8:	4b08      	ldr	r3, [pc, #32]	; (80005cc <RCC_APB1PeriphClockCmd+0x38>)
 80005aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	4313      	orrs	r3, r2
 80005b0:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 80005b2:	e006      	b.n	80005c2 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80005b4:	4905      	ldr	r1, [pc, #20]	; (80005cc <RCC_APB1PeriphClockCmd+0x38>)
 80005b6:	4b05      	ldr	r3, [pc, #20]	; (80005cc <RCC_APB1PeriphClockCmd+0x38>)
 80005b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	43db      	mvns	r3, r3
 80005be:	4013      	ands	r3, r2
 80005c0:	640b      	str	r3, [r1, #64]	; 0x40
}
 80005c2:	bf00      	nop
 80005c4:	370c      	adds	r7, #12
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bc80      	pop	{r7}
 80005ca:	4770      	bx	lr
 80005cc:	40023800 	.word	0x40023800

080005d0 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
 80005d8:	460b      	mov	r3, r1
 80005da:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80005dc:	78fb      	ldrb	r3, [r7, #3]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d006      	beq.n	80005f0 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80005e2:	4909      	ldr	r1, [pc, #36]	; (8000608 <RCC_APB2PeriphClockCmd+0x38>)
 80005e4:	4b08      	ldr	r3, [pc, #32]	; (8000608 <RCC_APB2PeriphClockCmd+0x38>)
 80005e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	4313      	orrs	r3, r2
 80005ec:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80005ee:	e006      	b.n	80005fe <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80005f0:	4905      	ldr	r1, [pc, #20]	; (8000608 <RCC_APB2PeriphClockCmd+0x38>)
 80005f2:	4b05      	ldr	r3, [pc, #20]	; (8000608 <RCC_APB2PeriphClockCmd+0x38>)
 80005f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	43db      	mvns	r3, r3
 80005fa:	4013      	ands	r3, r2
 80005fc:	644b      	str	r3, [r1, #68]	; 0x44
}
 80005fe:	bf00      	nop
 8000600:	370c      	adds	r7, #12
 8000602:	46bd      	mov	sp, r7
 8000604:	bc80      	pop	{r7}
 8000606:	4770      	bx	lr
 8000608:	40023800 	.word	0x40023800

0800060c <SYSCFG_EXTILineConfig>:
  *           and STM32F427x/STM32F437x devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 800060c:	b490      	push	{r4, r7}
 800060e:	b084      	sub	sp, #16
 8000610:	af00      	add	r7, sp, #0
 8000612:	4603      	mov	r3, r0
 8000614:	460a      	mov	r2, r1
 8000616:	71fb      	strb	r3, [r7, #7]
 8000618:	4613      	mov	r3, r2
 800061a:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 800061c:	2300      	movs	r3, #0
 800061e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8000620:	79bb      	ldrb	r3, [r7, #6]
 8000622:	f003 0303 	and.w	r3, r3, #3
 8000626:	009b      	lsls	r3, r3, #2
 8000628:	220f      	movs	r2, #15
 800062a:	fa02 f303 	lsl.w	r3, r2, r3
 800062e:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8000630:	4916      	ldr	r1, [pc, #88]	; (800068c <SYSCFG_EXTILineConfig+0x80>)
 8000632:	79bb      	ldrb	r3, [r7, #6]
 8000634:	089b      	lsrs	r3, r3, #2
 8000636:	b2db      	uxtb	r3, r3
 8000638:	4618      	mov	r0, r3
 800063a:	4a14      	ldr	r2, [pc, #80]	; (800068c <SYSCFG_EXTILineConfig+0x80>)
 800063c:	79bb      	ldrb	r3, [r7, #6]
 800063e:	089b      	lsrs	r3, r3, #2
 8000640:	b2db      	uxtb	r3, r3
 8000642:	3302      	adds	r3, #2
 8000644:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	43db      	mvns	r3, r3
 800064c:	401a      	ands	r2, r3
 800064e:	1c83      	adds	r3, r0, #2
 8000650:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8000654:	480d      	ldr	r0, [pc, #52]	; (800068c <SYSCFG_EXTILineConfig+0x80>)
 8000656:	79bb      	ldrb	r3, [r7, #6]
 8000658:	089b      	lsrs	r3, r3, #2
 800065a:	b2db      	uxtb	r3, r3
 800065c:	461c      	mov	r4, r3
 800065e:	4a0b      	ldr	r2, [pc, #44]	; (800068c <SYSCFG_EXTILineConfig+0x80>)
 8000660:	79bb      	ldrb	r3, [r7, #6]
 8000662:	089b      	lsrs	r3, r3, #2
 8000664:	b2db      	uxtb	r3, r3
 8000666:	3302      	adds	r3, #2
 8000668:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800066c:	79f9      	ldrb	r1, [r7, #7]
 800066e:	79bb      	ldrb	r3, [r7, #6]
 8000670:	f003 0303 	and.w	r3, r3, #3
 8000674:	009b      	lsls	r3, r3, #2
 8000676:	fa01 f303 	lsl.w	r3, r1, r3
 800067a:	431a      	orrs	r2, r3
 800067c:	1ca3      	adds	r3, r4, #2
 800067e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000682:	bf00      	nop
 8000684:	3710      	adds	r7, #16
 8000686:	46bd      	mov	sp, r7
 8000688:	bc90      	pop	{r4, r7}
 800068a:	4770      	bx	lr
 800068c:	40013800 	.word	0x40013800

08000690 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8000690:	b480      	push	{r7}
 8000692:	b085      	sub	sp, #20
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
 8000698:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 800069a:	2300      	movs	r3, #0
 800069c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	881b      	ldrh	r3, [r3, #0]
 80006a2:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	4a28      	ldr	r2, [pc, #160]	; (8000748 <TIM_TimeBaseInit+0xb8>)
 80006a8:	4293      	cmp	r3, r2
 80006aa:	d013      	beq.n	80006d4 <TIM_TimeBaseInit+0x44>
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	4a27      	ldr	r2, [pc, #156]	; (800074c <TIM_TimeBaseInit+0xbc>)
 80006b0:	4293      	cmp	r3, r2
 80006b2:	d00f      	beq.n	80006d4 <TIM_TimeBaseInit+0x44>
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80006ba:	d00b      	beq.n	80006d4 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	4a24      	ldr	r2, [pc, #144]	; (8000750 <TIM_TimeBaseInit+0xc0>)
 80006c0:	4293      	cmp	r3, r2
 80006c2:	d007      	beq.n	80006d4 <TIM_TimeBaseInit+0x44>
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	4a23      	ldr	r2, [pc, #140]	; (8000754 <TIM_TimeBaseInit+0xc4>)
 80006c8:	4293      	cmp	r3, r2
 80006ca:	d003      	beq.n	80006d4 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	4a22      	ldr	r2, [pc, #136]	; (8000758 <TIM_TimeBaseInit+0xc8>)
 80006d0:	4293      	cmp	r3, r2
 80006d2:	d108      	bne.n	80006e6 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 80006d4:	89fb      	ldrh	r3, [r7, #14]
 80006d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80006da:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 80006dc:	683b      	ldr	r3, [r7, #0]
 80006de:	885a      	ldrh	r2, [r3, #2]
 80006e0:	89fb      	ldrh	r3, [r7, #14]
 80006e2:	4313      	orrs	r3, r2
 80006e4:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	4a1c      	ldr	r2, [pc, #112]	; (800075c <TIM_TimeBaseInit+0xcc>)
 80006ea:	4293      	cmp	r3, r2
 80006ec:	d00c      	beq.n	8000708 <TIM_TimeBaseInit+0x78>
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	4a1b      	ldr	r2, [pc, #108]	; (8000760 <TIM_TimeBaseInit+0xd0>)
 80006f2:	4293      	cmp	r3, r2
 80006f4:	d008      	beq.n	8000708 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 80006f6:	89fb      	ldrh	r3, [r7, #14]
 80006f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80006fc:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80006fe:	683b      	ldr	r3, [r7, #0]
 8000700:	891a      	ldrh	r2, [r3, #8]
 8000702:	89fb      	ldrh	r3, [r7, #14]
 8000704:	4313      	orrs	r3, r2
 8000706:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	89fa      	ldrh	r2, [r7, #14]
 800070c:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	685a      	ldr	r2, [r3, #4]
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8000716:	683b      	ldr	r3, [r7, #0]
 8000718:	881a      	ldrh	r2, [r3, #0]
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	4a09      	ldr	r2, [pc, #36]	; (8000748 <TIM_TimeBaseInit+0xb8>)
 8000722:	4293      	cmp	r3, r2
 8000724:	d003      	beq.n	800072e <TIM_TimeBaseInit+0x9e>
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	4a08      	ldr	r2, [pc, #32]	; (800074c <TIM_TimeBaseInit+0xbc>)
 800072a:	4293      	cmp	r3, r2
 800072c:	d104      	bne.n	8000738 <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 800072e:	683b      	ldr	r3, [r7, #0]
 8000730:	7a9b      	ldrb	r3, [r3, #10]
 8000732:	b29a      	uxth	r2, r3
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	2201      	movs	r2, #1
 800073c:	829a      	strh	r2, [r3, #20]
}
 800073e:	bf00      	nop
 8000740:	3714      	adds	r7, #20
 8000742:	46bd      	mov	sp, r7
 8000744:	bc80      	pop	{r7}
 8000746:	4770      	bx	lr
 8000748:	40010000 	.word	0x40010000
 800074c:	40010400 	.word	0x40010400
 8000750:	40000400 	.word	0x40000400
 8000754:	40000800 	.word	0x40000800
 8000758:	40000c00 	.word	0x40000c00
 800075c:	40001000 	.word	0x40001000
 8000760:	40001400 	.word	0x40001400

08000764 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8000764:	b480      	push	{r7}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
 800076c:	460b      	mov	r3, r1
 800076e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000770:	78fb      	ldrb	r3, [r7, #3]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d008      	beq.n	8000788 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	881b      	ldrh	r3, [r3, #0]
 800077a:	b29b      	uxth	r3, r3
 800077c:	f043 0301 	orr.w	r3, r3, #1
 8000780:	b29a      	uxth	r2, r3
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 8000786:	e007      	b.n	8000798 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	881b      	ldrh	r3, [r3, #0]
 800078c:	b29b      	uxth	r3, r3
 800078e:	f023 0301 	bic.w	r3, r3, #1
 8000792:	b29a      	uxth	r2, r3
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	801a      	strh	r2, [r3, #0]
}
 8000798:	bf00      	nop
 800079a:	370c      	adds	r7, #12
 800079c:	46bd      	mov	sp, r7
 800079e:	bc80      	pop	{r7}
 80007a0:	4770      	bx	lr

080007a2 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 80007a2:	b480      	push	{r7}
 80007a4:	b083      	sub	sp, #12
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	6078      	str	r0, [r7, #4]
 80007aa:	460b      	mov	r3, r1
 80007ac:	807b      	strh	r3, [r7, #2]
 80007ae:	4613      	mov	r3, r2
 80007b0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80007b2:	787b      	ldrb	r3, [r7, #1]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d008      	beq.n	80007ca <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	899b      	ldrh	r3, [r3, #12]
 80007bc:	b29a      	uxth	r2, r3
 80007be:	887b      	ldrh	r3, [r7, #2]
 80007c0:	4313      	orrs	r3, r2
 80007c2:	b29a      	uxth	r2, r3
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 80007c8:	e009      	b.n	80007de <TIM_ITConfig+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_IT;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	899b      	ldrh	r3, [r3, #12]
 80007ce:	b29a      	uxth	r2, r3
 80007d0:	887b      	ldrh	r3, [r7, #2]
 80007d2:	43db      	mvns	r3, r3
 80007d4:	b29b      	uxth	r3, r3
 80007d6:	4013      	ands	r3, r2
 80007d8:	b29a      	uxth	r2, r3
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	819a      	strh	r2, [r3, #12]
}
 80007de:	bf00      	nop
 80007e0:	370c      	adds	r7, #12
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bc80      	pop	{r7}
 80007e6:	4770      	bx	lr

080007e8 <TIM_GetITStatus>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *     
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b085      	sub	sp, #20
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
 80007f0:	460b      	mov	r3, r1
 80007f2:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 80007f4:	2300      	movs	r3, #0
 80007f6:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 80007f8:	2300      	movs	r3, #0
 80007fa:	81bb      	strh	r3, [r7, #12]
 80007fc:	2300      	movs	r3, #0
 80007fe:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	8a1b      	ldrh	r3, [r3, #16]
 8000804:	b29a      	uxth	r2, r3
 8000806:	887b      	ldrh	r3, [r7, #2]
 8000808:	4013      	ands	r3, r2
 800080a:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	899b      	ldrh	r3, [r3, #12]
 8000810:	b29a      	uxth	r2, r3
 8000812:	887b      	ldrh	r3, [r7, #2]
 8000814:	4013      	ands	r3, r2
 8000816:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8000818:	89bb      	ldrh	r3, [r7, #12]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d005      	beq.n	800082a <TIM_GetITStatus+0x42>
 800081e:	897b      	ldrh	r3, [r7, #10]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d002      	beq.n	800082a <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 8000824:	2301      	movs	r3, #1
 8000826:	73fb      	strb	r3, [r7, #15]
 8000828:	e001      	b.n	800082e <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 800082a:	2300      	movs	r3, #0
 800082c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800082e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000830:	4618      	mov	r0, r3
 8000832:	3714      	adds	r7, #20
 8000834:	46bd      	mov	sp, r7
 8000836:	bc80      	pop	{r7}
 8000838:	4770      	bx	lr

0800083a <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 800083a:	b480      	push	{r7}
 800083c:	b083      	sub	sp, #12
 800083e:	af00      	add	r7, sp, #0
 8000840:	6078      	str	r0, [r7, #4]
 8000842:	460b      	mov	r3, r1
 8000844:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8000846:	887b      	ldrh	r3, [r7, #2]
 8000848:	43db      	mvns	r3, r3
 800084a:	b29a      	uxth	r2, r3
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	821a      	strh	r2, [r3, #16]
}
 8000850:	bf00      	nop
 8000852:	370c      	adds	r7, #12
 8000854:	46bd      	mov	sp, r7
 8000856:	bc80      	pop	{r7}
 8000858:	4770      	bx	lr
	...

0800085c <main>:
void Reset_ALL_GPIOD(void);

static int statement = 1;
static int btn_statement = 0;

int main(void) {
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
	int x = 0;
 8000862:	2300      	movs	r3, #0
 8000864:	607b      	str	r3, [r7, #4]
	GPIOD_Config();
 8000866:	f000 f841 	bl	80008ec <GPIOD_Config>
	GPIOA_Config();
 800086a:	f000 f829 	bl	80008c0 <GPIOA_Config>

    // External interrupt initialization
    EXTI_Config();
 800086e:	f000 f875 	bl	800095c <EXTI_Config>

	while(1){
		if(btn_statement == 0){
 8000872:	4b12      	ldr	r3, [pc, #72]	; (80008bc <main+0x60>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d10f      	bne.n	800089a <main+0x3e>
			if(x != 1){
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	2b01      	cmp	r3, #1
 800087e:	d009      	beq.n	8000894 <main+0x38>
				Reset_ALL_GPIOD();
 8000880:	f000 f9ae 	bl	8000be0 <Reset_ALL_GPIOD>
				INTTIM_Config(400, 42000);
 8000884:	f24a 4110 	movw	r1, #42000	; 0xa410
 8000888:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800088c:	f000 f9d4 	bl	8000c38 <INTTIM_Config>
				x = 1;
 8000890:	2301      	movs	r3, #1
 8000892:	607b      	str	r3, [r7, #4]
			}
			StraightDirection();
 8000894:	f000 f88c 	bl	80009b0 <StraightDirection>
 8000898:	e7eb      	b.n	8000872 <main+0x16>
		}else{
			if(x != 2){
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	2b02      	cmp	r3, #2
 800089e:	d009      	beq.n	80008b4 <main+0x58>
				Reset_ALL_GPIOD();
 80008a0:	f000 f99e 	bl	8000be0 <Reset_ALL_GPIOD>
				INTTIM_Config(1000, 42000);
 80008a4:	f24a 4110 	movw	r1, #42000	; 0xa410
 80008a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008ac:	f000 f9c4 	bl	8000c38 <INTTIM_Config>
				x = 2;
 80008b0:	2302      	movs	r3, #2
 80008b2:	607b      	str	r3, [r7, #4]
			}
			ReversedDirection();
 80008b4:	f000 f908 	bl	8000ac8 <ReversedDirection>
		if(btn_statement == 0){
 80008b8:	e7db      	b.n	8000872 <main+0x16>
 80008ba:	bf00      	nop
 80008bc:	20000020 	.word	0x20000020

080008c0 <GPIOA_Config>:
		}
	}
}

void GPIOA_Config(void) {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef gpioConf;
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 80008c6:	2101      	movs	r1, #1
 80008c8:	2001      	movs	r0, #1
 80008ca:	f7ff fe45 	bl	8000558 <RCC_AHB1PeriphClockCmd>
	gpioConf.GPIO_Pin = GPIO_Pin_0;
 80008ce:	2301      	movs	r3, #1
 80008d0:	603b      	str	r3, [r7, #0]
	gpioConf.GPIO_Mode = GPIO_Mode_IN;
 80008d2:	2300      	movs	r3, #0
 80008d4:	713b      	strb	r3, [r7, #4]

	GPIO_Init(GPIOA, &gpioConf);
 80008d6:	463b      	mov	r3, r7
 80008d8:	4619      	mov	r1, r3
 80008da:	4803      	ldr	r0, [pc, #12]	; (80008e8 <GPIOA_Config+0x28>)
 80008dc:	f7ff fd7a 	bl	80003d4 <GPIO_Init>
}
 80008e0:	bf00      	nop
 80008e2:	3708      	adds	r7, #8
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	40020000 	.word	0x40020000

080008ec <GPIOD_Config>:

void GPIOD_Config(void) {
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef gpioConf;
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 80008f2:	2101      	movs	r1, #1
 80008f4:	2008      	movs	r0, #8
 80008f6:	f7ff fe2f 	bl	8000558 <RCC_AHB1PeriphClockCmd>
	gpioConf.GPIO_Pin = GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;
 80008fa:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80008fe:	603b      	str	r3, [r7, #0]
	gpioConf.GPIO_Mode = GPIO_Mode_OUT;
 8000900:	2301      	movs	r3, #1
 8000902:	713b      	strb	r3, [r7, #4]
	gpioConf.GPIO_Speed = GPIO_Speed_100MHz;
 8000904:	2303      	movs	r3, #3
 8000906:	717b      	strb	r3, [r7, #5]
	gpioConf.GPIO_OType = GPIO_OType_PP;
 8000908:	2300      	movs	r3, #0
 800090a:	71bb      	strb	r3, [r7, #6]
	gpioConf.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	71fb      	strb	r3, [r7, #7]

	GPIO_Init(GPIOD, &gpioConf);
 8000910:	463b      	mov	r3, r7
 8000912:	4619      	mov	r1, r3
 8000914:	4803      	ldr	r0, [pc, #12]	; (8000924 <GPIOD_Config+0x38>)
 8000916:	f7ff fd5d 	bl	80003d4 <GPIO_Init>
}
 800091a:	bf00      	nop
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40020c00 	.word	0x40020c00

08000928 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void){
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
    // Checks whether the interrupt from EXTI0 or not
    if (EXTI_GetITStatus(EXTI_Line0)){
 800092c:	2001      	movs	r0, #1
 800092e:	f7ff fd1f 	bl	8000370 <EXTI_GetITStatus>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d00d      	beq.n	8000954 <EXTI0_IRQHandler+0x2c>
    	if(btn_statement == 0){
 8000938:	4b07      	ldr	r3, [pc, #28]	; (8000958 <EXTI0_IRQHandler+0x30>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d103      	bne.n	8000948 <EXTI0_IRQHandler+0x20>
    		btn_statement = 1;
 8000940:	4b05      	ldr	r3, [pc, #20]	; (8000958 <EXTI0_IRQHandler+0x30>)
 8000942:	2201      	movs	r2, #1
 8000944:	601a      	str	r2, [r3, #0]
 8000946:	e002      	b.n	800094e <EXTI0_IRQHandler+0x26>
    	}else{
    		btn_statement = 0;
 8000948:	4b03      	ldr	r3, [pc, #12]	; (8000958 <EXTI0_IRQHandler+0x30>)
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]
    	}
        // Clears the EXTI line pending bit
        EXTI_ClearITPendingBit(EXTI_Line0);
 800094e:	2001      	movs	r0, #1
 8000950:	f7ff fd32 	bl	80003b8 <EXTI_ClearITPendingBit>
    }
}
 8000954:	bf00      	nop
 8000956:	bd80      	pop	{r7, pc}
 8000958:	20000020 	.word	0x20000020

0800095c <EXTI_Config>:

void EXTI_Config(void) {
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af00      	add	r7, sp, #0
    // Clock for SYSCFG
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8000962:	2101      	movs	r1, #1
 8000964:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000968:	f7ff fe32 	bl	80005d0 <RCC_APB2PeriphClockCmd>

    // Selects the GPIOA pin 0 used as external interrupt source
    SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA, EXTI_PinSource0);
 800096c:	2100      	movs	r1, #0
 800096e:	2000      	movs	r0, #0
 8000970:	f7ff fe4c 	bl	800060c <SYSCFG_EXTILineConfig>

    // External interrupt settings
    EXTI_InitTypeDef EXTI_InitStruct;
    EXTI_InitStruct.EXTI_Line = EXTI_Line0;
 8000974:	2301      	movs	r3, #1
 8000976:	60bb      	str	r3, [r7, #8]
    EXTI_InitStruct.EXTI_LineCmd = ENABLE;
 8000978:	2301      	movs	r3, #1
 800097a:	73bb      	strb	r3, [r7, #14]
    EXTI_InitStruct.EXTI_Mode = EXTI_Mode_Interrupt;
 800097c:	2300      	movs	r3, #0
 800097e:	733b      	strb	r3, [r7, #12]
    EXTI_InitStruct.EXTI_Trigger = EXTI_Trigger_Rising;
 8000980:	2308      	movs	r3, #8
 8000982:	737b      	strb	r3, [r7, #13]
    EXTI_Init(&EXTI_InitStruct);
 8000984:	f107 0308 	add.w	r3, r7, #8
 8000988:	4618      	mov	r0, r3
 800098a:	f7ff fc7f 	bl	800028c <EXTI_Init>

    // Nested vectored interrupt settings
    NVIC_InitTypeDef NVIC_InitStruct;
    NVIC_InitStruct.NVIC_IRQChannel = EXTI0_IRQn;
 800098e:	2306      	movs	r3, #6
 8000990:	713b      	strb	r3, [r7, #4]
    NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 8000992:	2301      	movs	r3, #1
 8000994:	71fb      	strb	r3, [r7, #7]
    // EXTI0_IRQn has Most important interrupt
    NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 0x00;
 8000996:	2300      	movs	r3, #0
 8000998:	717b      	strb	r3, [r7, #5]
    NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0x00;
 800099a:	2300      	movs	r3, #0
 800099c:	71bb      	strb	r3, [r7, #6]
    NVIC_Init(&NVIC_InitStruct);
 800099e:	1d3b      	adds	r3, r7, #4
 80009a0:	4618      	mov	r0, r3
 80009a2:	f7ff fc11 	bl	80001c8 <NVIC_Init>
}
 80009a6:	bf00      	nop
 80009a8:	3710      	adds	r7, #16
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
	...

080009b0 <StraightDirection>:

void StraightDirection(void){
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
	switch(statement){
 80009b4:	4b42      	ldr	r3, [pc, #264]	; (8000ac0 <StraightDirection+0x110>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	3b01      	subs	r3, #1
 80009ba:	2b03      	cmp	r3, #3
 80009bc:	d87d      	bhi.n	8000aba <StraightDirection+0x10a>
 80009be:	a201      	add	r2, pc, #4	; (adr r2, 80009c4 <StraightDirection+0x14>)
 80009c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009c4:	080009d5 	.word	0x080009d5
 80009c8:	08000a0b 	.word	0x08000a0b
 80009cc:	08000a41 	.word	0x08000a41
 80009d0:	08000a77 	.word	0x08000a77
		case 1:
			if(GPIO_ReadOutputDataBit(GPIOD, GPIO_Pin_12))
 80009d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009d8:	483a      	ldr	r0, [pc, #232]	; (8000ac4 <StraightDirection+0x114>)
 80009da:	f7ff fd88 	bl	80004ee <GPIO_ReadOutputDataBit>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d004      	beq.n	80009ee <StraightDirection+0x3e>
				GPIO_ResetBits(GPIOD, GPIO_Pin_12);
 80009e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009e8:	4836      	ldr	r0, [pc, #216]	; (8000ac4 <StraightDirection+0x114>)
 80009ea:	f7ff fda7 	bl	800053c <GPIO_ResetBits>
			if(!GPIO_ReadOutputDataBit(GPIOD, GPIO_Pin_14)) //if led lights, won't turn it on again
 80009ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009f2:	4834      	ldr	r0, [pc, #208]	; (8000ac4 <StraightDirection+0x114>)
 80009f4:	f7ff fd7b 	bl	80004ee <GPIO_ReadOutputDataBit>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d156      	bne.n	8000aac <StraightDirection+0xfc>
				GPIO_SetBits(GPIOD, GPIO_Pin_14);
 80009fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a02:	4830      	ldr	r0, [pc, #192]	; (8000ac4 <StraightDirection+0x114>)
 8000a04:	f7ff fd8c 	bl	8000520 <GPIO_SetBits>
		break;
 8000a08:	e050      	b.n	8000aac <StraightDirection+0xfc>
		case 2:
			if(GPIO_ReadOutputDataBit(GPIOD, GPIO_Pin_14))
 8000a0a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a0e:	482d      	ldr	r0, [pc, #180]	; (8000ac4 <StraightDirection+0x114>)
 8000a10:	f7ff fd6d 	bl	80004ee <GPIO_ReadOutputDataBit>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d004      	beq.n	8000a24 <StraightDirection+0x74>
				GPIO_ResetBits(GPIOD, GPIO_Pin_14);
 8000a1a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a1e:	4829      	ldr	r0, [pc, #164]	; (8000ac4 <StraightDirection+0x114>)
 8000a20:	f7ff fd8c 	bl	800053c <GPIO_ResetBits>
			if(!GPIO_ReadOutputDataBit(GPIOD, GPIO_Pin_13))
 8000a24:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a28:	4826      	ldr	r0, [pc, #152]	; (8000ac4 <StraightDirection+0x114>)
 8000a2a:	f7ff fd60 	bl	80004ee <GPIO_ReadOutputDataBit>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d13d      	bne.n	8000ab0 <StraightDirection+0x100>
				GPIO_SetBits(GPIOD, GPIO_Pin_13);
 8000a34:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a38:	4822      	ldr	r0, [pc, #136]	; (8000ac4 <StraightDirection+0x114>)
 8000a3a:	f7ff fd71 	bl	8000520 <GPIO_SetBits>
		break;
 8000a3e:	e037      	b.n	8000ab0 <StraightDirection+0x100>
		case 3:
			if(GPIO_ReadOutputDataBit(GPIOD, GPIO_Pin_13))
 8000a40:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a44:	481f      	ldr	r0, [pc, #124]	; (8000ac4 <StraightDirection+0x114>)
 8000a46:	f7ff fd52 	bl	80004ee <GPIO_ReadOutputDataBit>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d004      	beq.n	8000a5a <StraightDirection+0xaa>
				GPIO_ResetBits(GPIOD, GPIO_Pin_13);
 8000a50:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a54:	481b      	ldr	r0, [pc, #108]	; (8000ac4 <StraightDirection+0x114>)
 8000a56:	f7ff fd71 	bl	800053c <GPIO_ResetBits>
			if(!GPIO_ReadOutputDataBit(GPIOD, GPIO_Pin_15))
 8000a5a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a5e:	4819      	ldr	r0, [pc, #100]	; (8000ac4 <StraightDirection+0x114>)
 8000a60:	f7ff fd45 	bl	80004ee <GPIO_ReadOutputDataBit>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d124      	bne.n	8000ab4 <StraightDirection+0x104>
				GPIO_SetBits(GPIOD, GPIO_Pin_15);
 8000a6a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a6e:	4815      	ldr	r0, [pc, #84]	; (8000ac4 <StraightDirection+0x114>)
 8000a70:	f7ff fd56 	bl	8000520 <GPIO_SetBits>
		break;
 8000a74:	e01e      	b.n	8000ab4 <StraightDirection+0x104>
		case 4:
			if(GPIO_ReadOutputDataBit(GPIOD, GPIO_Pin_15))
 8000a76:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a7a:	4812      	ldr	r0, [pc, #72]	; (8000ac4 <StraightDirection+0x114>)
 8000a7c:	f7ff fd37 	bl	80004ee <GPIO_ReadOutputDataBit>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d004      	beq.n	8000a90 <StraightDirection+0xe0>
				GPIO_ResetBits(GPIOD, GPIO_Pin_15);
 8000a86:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a8a:	480e      	ldr	r0, [pc, #56]	; (8000ac4 <StraightDirection+0x114>)
 8000a8c:	f7ff fd56 	bl	800053c <GPIO_ResetBits>
			if(!GPIO_ReadOutputDataBit(GPIOD, GPIO_Pin_12))
 8000a90:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a94:	480b      	ldr	r0, [pc, #44]	; (8000ac4 <StraightDirection+0x114>)
 8000a96:	f7ff fd2a 	bl	80004ee <GPIO_ReadOutputDataBit>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d10b      	bne.n	8000ab8 <StraightDirection+0x108>
				GPIO_SetBits(GPIOD, GPIO_Pin_12);
 8000aa0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000aa4:	4807      	ldr	r0, [pc, #28]	; (8000ac4 <StraightDirection+0x114>)
 8000aa6:	f7ff fd3b 	bl	8000520 <GPIO_SetBits>
		break;
 8000aaa:	e005      	b.n	8000ab8 <StraightDirection+0x108>
		break;
 8000aac:	bf00      	nop
 8000aae:	e004      	b.n	8000aba <StraightDirection+0x10a>
		break;
 8000ab0:	bf00      	nop
 8000ab2:	e002      	b.n	8000aba <StraightDirection+0x10a>
		break;
 8000ab4:	bf00      	nop
 8000ab6:	e000      	b.n	8000aba <StraightDirection+0x10a>
		break;
 8000ab8:	bf00      	nop
	}
}
 8000aba:	bf00      	nop
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	20000000 	.word	0x20000000
 8000ac4:	40020c00 	.word	0x40020c00

08000ac8 <ReversedDirection>:

void ReversedDirection(void){
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
	switch(statement){
 8000acc:	4b42      	ldr	r3, [pc, #264]	; (8000bd8 <ReversedDirection+0x110>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	3b01      	subs	r3, #1
 8000ad2:	2b03      	cmp	r3, #3
 8000ad4:	d87d      	bhi.n	8000bd2 <ReversedDirection+0x10a>
 8000ad6:	a201      	add	r2, pc, #4	; (adr r2, 8000adc <ReversedDirection+0x14>)
 8000ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000adc:	08000aed 	.word	0x08000aed
 8000ae0:	08000b23 	.word	0x08000b23
 8000ae4:	08000b59 	.word	0x08000b59
 8000ae8:	08000b8f 	.word	0x08000b8f
		case 1:
			if(GPIO_ReadOutputDataBit(GPIOD, GPIO_Pin_14))
 8000aec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000af0:	483a      	ldr	r0, [pc, #232]	; (8000bdc <ReversedDirection+0x114>)
 8000af2:	f7ff fcfc 	bl	80004ee <GPIO_ReadOutputDataBit>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d004      	beq.n	8000b06 <ReversedDirection+0x3e>
				GPIO_ResetBits(GPIOD, GPIO_Pin_14);
 8000afc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b00:	4836      	ldr	r0, [pc, #216]	; (8000bdc <ReversedDirection+0x114>)
 8000b02:	f7ff fd1b 	bl	800053c <GPIO_ResetBits>
			if(!GPIO_ReadOutputDataBit(GPIOD, GPIO_Pin_12))
 8000b06:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b0a:	4834      	ldr	r0, [pc, #208]	; (8000bdc <ReversedDirection+0x114>)
 8000b0c:	f7ff fcef 	bl	80004ee <GPIO_ReadOutputDataBit>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d156      	bne.n	8000bc4 <ReversedDirection+0xfc>
				GPIO_SetBits(GPIOD, GPIO_Pin_12);
 8000b16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b1a:	4830      	ldr	r0, [pc, #192]	; (8000bdc <ReversedDirection+0x114>)
 8000b1c:	f7ff fd00 	bl	8000520 <GPIO_SetBits>
		break;
 8000b20:	e050      	b.n	8000bc4 <ReversedDirection+0xfc>
		case 2:
			if(GPIO_ReadOutputDataBit(GPIOD, GPIO_Pin_12))
 8000b22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b26:	482d      	ldr	r0, [pc, #180]	; (8000bdc <ReversedDirection+0x114>)
 8000b28:	f7ff fce1 	bl	80004ee <GPIO_ReadOutputDataBit>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d004      	beq.n	8000b3c <ReversedDirection+0x74>
				GPIO_ResetBits(GPIOD, GPIO_Pin_12);
 8000b32:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b36:	4829      	ldr	r0, [pc, #164]	; (8000bdc <ReversedDirection+0x114>)
 8000b38:	f7ff fd00 	bl	800053c <GPIO_ResetBits>
			if(!GPIO_ReadOutputDataBit(GPIOD, GPIO_Pin_15))
 8000b3c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b40:	4826      	ldr	r0, [pc, #152]	; (8000bdc <ReversedDirection+0x114>)
 8000b42:	f7ff fcd4 	bl	80004ee <GPIO_ReadOutputDataBit>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d13d      	bne.n	8000bc8 <ReversedDirection+0x100>
				GPIO_SetBits(GPIOD, GPIO_Pin_15);
 8000b4c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b50:	4822      	ldr	r0, [pc, #136]	; (8000bdc <ReversedDirection+0x114>)
 8000b52:	f7ff fce5 	bl	8000520 <GPIO_SetBits>
		break;
 8000b56:	e037      	b.n	8000bc8 <ReversedDirection+0x100>
		case 3:
			if(GPIO_ReadOutputDataBit(GPIOD, GPIO_Pin_15))
 8000b58:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b5c:	481f      	ldr	r0, [pc, #124]	; (8000bdc <ReversedDirection+0x114>)
 8000b5e:	f7ff fcc6 	bl	80004ee <GPIO_ReadOutputDataBit>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d004      	beq.n	8000b72 <ReversedDirection+0xaa>
				GPIO_ResetBits(GPIOD, GPIO_Pin_15);
 8000b68:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b6c:	481b      	ldr	r0, [pc, #108]	; (8000bdc <ReversedDirection+0x114>)
 8000b6e:	f7ff fce5 	bl	800053c <GPIO_ResetBits>
			if(!GPIO_ReadOutputDataBit(GPIOD, GPIO_Pin_13))
 8000b72:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b76:	4819      	ldr	r0, [pc, #100]	; (8000bdc <ReversedDirection+0x114>)
 8000b78:	f7ff fcb9 	bl	80004ee <GPIO_ReadOutputDataBit>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d124      	bne.n	8000bcc <ReversedDirection+0x104>
				GPIO_SetBits(GPIOD, GPIO_Pin_13);
 8000b82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b86:	4815      	ldr	r0, [pc, #84]	; (8000bdc <ReversedDirection+0x114>)
 8000b88:	f7ff fcca 	bl	8000520 <GPIO_SetBits>
		break;
 8000b8c:	e01e      	b.n	8000bcc <ReversedDirection+0x104>
		case 4:
			if(GPIO_ReadOutputDataBit(GPIOD, GPIO_Pin_13))
 8000b8e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b92:	4812      	ldr	r0, [pc, #72]	; (8000bdc <ReversedDirection+0x114>)
 8000b94:	f7ff fcab 	bl	80004ee <GPIO_ReadOutputDataBit>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d004      	beq.n	8000ba8 <ReversedDirection+0xe0>
				GPIO_ResetBits(GPIOD, GPIO_Pin_13);
 8000b9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ba2:	480e      	ldr	r0, [pc, #56]	; (8000bdc <ReversedDirection+0x114>)
 8000ba4:	f7ff fcca 	bl	800053c <GPIO_ResetBits>
			if(!GPIO_ReadOutputDataBit(GPIOD, GPIO_Pin_14))
 8000ba8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bac:	480b      	ldr	r0, [pc, #44]	; (8000bdc <ReversedDirection+0x114>)
 8000bae:	f7ff fc9e 	bl	80004ee <GPIO_ReadOutputDataBit>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d10b      	bne.n	8000bd0 <ReversedDirection+0x108>
				GPIO_SetBits(GPIOD, GPIO_Pin_14);
 8000bb8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bbc:	4807      	ldr	r0, [pc, #28]	; (8000bdc <ReversedDirection+0x114>)
 8000bbe:	f7ff fcaf 	bl	8000520 <GPIO_SetBits>
		break;
 8000bc2:	e005      	b.n	8000bd0 <ReversedDirection+0x108>
		break;
 8000bc4:	bf00      	nop
 8000bc6:	e004      	b.n	8000bd2 <ReversedDirection+0x10a>
		break;
 8000bc8:	bf00      	nop
 8000bca:	e002      	b.n	8000bd2 <ReversedDirection+0x10a>
		break;
 8000bcc:	bf00      	nop
 8000bce:	e000      	b.n	8000bd2 <ReversedDirection+0x10a>
		break;
 8000bd0:	bf00      	nop
	}
}
 8000bd2:	bf00      	nop
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	20000000 	.word	0x20000000
 8000bdc:	40020c00 	.word	0x40020c00

08000be0 <Reset_ALL_GPIOD>:

void Reset_ALL_GPIOD(void){
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
	GPIO_ResetBits(GPIOD, GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15);
 8000be4:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000be8:	4802      	ldr	r0, [pc, #8]	; (8000bf4 <Reset_ALL_GPIOD+0x14>)
 8000bea:	f7ff fca7 	bl	800053c <GPIO_ResetBits>
}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40020c00 	.word	0x40020c00

08000bf8 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void) {
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
	if (TIM_GetITStatus(TIM2, TIM_IT_Update) != RESET){
 8000bfc:	2101      	movs	r1, #1
 8000bfe:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000c02:	f7ff fdf1 	bl	80007e8 <TIM_GetITStatus>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d011      	beq.n	8000c30 <TIM2_IRQHandler+0x38>
		TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000c12:	f7ff fe12 	bl	800083a <TIM_ClearITPendingBit>
		if(statement != 4){
 8000c16:	4b07      	ldr	r3, [pc, #28]	; (8000c34 <TIM2_IRQHandler+0x3c>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	2b04      	cmp	r3, #4
 8000c1c:	d005      	beq.n	8000c2a <TIM2_IRQHandler+0x32>
			statement++;
 8000c1e:	4b05      	ldr	r3, [pc, #20]	; (8000c34 <TIM2_IRQHandler+0x3c>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	3301      	adds	r3, #1
 8000c24:	4a03      	ldr	r2, [pc, #12]	; (8000c34 <TIM2_IRQHandler+0x3c>)
 8000c26:	6013      	str	r3, [r2, #0]
		}else{
			statement = 1;
		}
	}
}
 8000c28:	e002      	b.n	8000c30 <TIM2_IRQHandler+0x38>
			statement = 1;
 8000c2a:	4b02      	ldr	r3, [pc, #8]	; (8000c34 <TIM2_IRQHandler+0x3c>)
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	601a      	str	r2, [r3, #0]
}
 8000c30:	bf00      	nop
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	20000000 	.word	0x20000000

08000c38 <INTTIM_Config>:

void INTTIM_Config(int period, int prescaler) {
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b086      	sub	sp, #24
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	6039      	str	r1, [r7, #0]
	NVIC_InitTypeDef nvic_struct;
	nvic_struct.NVIC_IRQChannel = TIM2_IRQn;
 8000c42:	231c      	movs	r3, #28
 8000c44:	753b      	strb	r3, [r7, #20]
	nvic_struct.NVIC_IRQChannelPreemptionPriority = 0;
 8000c46:	2300      	movs	r3, #0
 8000c48:	757b      	strb	r3, [r7, #21]
	nvic_struct.NVIC_IRQChannelSubPriority = 1;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	75bb      	strb	r3, [r7, #22]
	nvic_struct.NVIC_IRQChannelCmd = ENABLE;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	75fb      	strb	r3, [r7, #23]

	NVIC_Init(&nvic_struct);
 8000c52:	f107 0314 	add.w	r3, r7, #20
 8000c56:	4618      	mov	r0, r3
 8000c58:	f7ff fab6 	bl	80001c8 <NVIC_Init>

	TIM_TimeBaseInitTypeDef tim_struct;
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 8000c5c:	2101      	movs	r1, #1
 8000c5e:	2001      	movs	r0, #1
 8000c60:	f7ff fc98 	bl	8000594 <RCC_APB1PeriphClockCmd>

	tim_struct.TIM_Prescaler = prescaler;
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	b29b      	uxth	r3, r3
 8000c68:	813b      	strh	r3, [r7, #8]
	tim_struct.TIM_Period = period;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	60fb      	str	r3, [r7, #12]

	tim_struct.TIM_ClockDivision = 0;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	823b      	strh	r3, [r7, #16]
	tim_struct.TIM_CounterMode = TIM_CounterMode_Up;
 8000c72:	2300      	movs	r3, #0
 8000c74:	817b      	strh	r3, [r7, #10]
	TIM_TimeBaseInit(TIM2, &tim_struct);
 8000c76:	f107 0308 	add.w	r3, r7, #8
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000c80:	f7ff fd06 	bl	8000690 <TIM_TimeBaseInit>
	TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);
 8000c84:	2201      	movs	r2, #1
 8000c86:	2101      	movs	r1, #1
 8000c88:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000c8c:	f7ff fd89 	bl	80007a2 <TIM_ITConfig>
	TIM_Cmd(TIM2, ENABLE);
 8000c90:	2101      	movs	r1, #1
 8000c92:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000c96:	f7ff fd65 	bl	8000764 <TIM_Cmd>
}
 8000c9a:	bf00      	nop
 8000c9c:	3718      	adds	r7, #24
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
	...

08000ca4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ca4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cdc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000ca8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000caa:	e003      	b.n	8000cb4 <LoopCopyDataInit>

08000cac <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000cac:	4b0c      	ldr	r3, [pc, #48]	; (8000ce0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000cae:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000cb0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000cb2:	3104      	adds	r1, #4

08000cb4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000cb4:	480b      	ldr	r0, [pc, #44]	; (8000ce4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000cb6:	4b0c      	ldr	r3, [pc, #48]	; (8000ce8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000cb8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000cba:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000cbc:	d3f6      	bcc.n	8000cac <CopyDataInit>
  ldr  r2, =_sbss
 8000cbe:	4a0b      	ldr	r2, [pc, #44]	; (8000cec <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000cc0:	e002      	b.n	8000cc8 <LoopFillZerobss>

08000cc2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000cc2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000cc4:	f842 3b04 	str.w	r3, [r2], #4

08000cc8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000cc8:	4b09      	ldr	r3, [pc, #36]	; (8000cf0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000cca:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ccc:	d3f9      	bcc.n	8000cc2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000cce:	f000 f83d 	bl	8000d4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cd2:	f000 f8e3 	bl	8000e9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cd6:	f7ff fdc1 	bl	800085c <main>
  bx  lr    
 8000cda:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000cdc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000ce0:	08000f04 	.word	0x08000f04
  ldr  r0, =_sdata
 8000ce4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000ce8:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 8000cec:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 8000cf0:	20000024 	.word	0x20000024

08000cf4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cf4:	e7fe      	b.n	8000cf4 <ADC_IRQHandler>

08000cf6 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	af00      	add	r7, sp, #0
}
 8000cfa:	bf00      	nop
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bc80      	pop	{r7}
 8000d00:	4770      	bx	lr

08000d02 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000d02:	b480      	push	{r7}
 8000d04:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000d06:	e7fe      	b.n	8000d06 <HardFault_Handler+0x4>

08000d08 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000d0c:	e7fe      	b.n	8000d0c <MemManage_Handler+0x4>

08000d0e <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000d12:	e7fe      	b.n	8000d12 <BusFault_Handler+0x4>

08000d14 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000d18:	e7fe      	b.n	8000d18 <UsageFault_Handler+0x4>

08000d1a <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	af00      	add	r7, sp, #0
}
 8000d1e:	bf00      	nop
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bc80      	pop	{r7}
 8000d24:	4770      	bx	lr

08000d26 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000d26:	b480      	push	{r7}
 8000d28:	af00      	add	r7, sp, #0
}
 8000d2a:	bf00      	nop
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bc80      	pop	{r7}
 8000d30:	4770      	bx	lr

08000d32 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000d32:	b480      	push	{r7}
 8000d34:	af00      	add	r7, sp, #0
}
 8000d36:	bf00      	nop
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bc80      	pop	{r7}
 8000d3c:	4770      	bx	lr

08000d3e <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 8000d42:	bf00      	nop
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bc80      	pop	{r7}
 8000d48:	4770      	bx	lr
	...

08000d4c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000d50:	4a12      	ldr	r2, [pc, #72]	; (8000d9c <SystemInit+0x50>)
 8000d52:	4b12      	ldr	r3, [pc, #72]	; (8000d9c <SystemInit+0x50>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f043 0301 	orr.w	r3, r3, #1
 8000d5a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000d5c:	4b0f      	ldr	r3, [pc, #60]	; (8000d9c <SystemInit+0x50>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000d62:	4a0e      	ldr	r2, [pc, #56]	; (8000d9c <SystemInit+0x50>)
 8000d64:	4b0d      	ldr	r3, [pc, #52]	; (8000d9c <SystemInit+0x50>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000d6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d70:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000d72:	4b0a      	ldr	r3, [pc, #40]	; (8000d9c <SystemInit+0x50>)
 8000d74:	4a0a      	ldr	r2, [pc, #40]	; (8000da0 <SystemInit+0x54>)
 8000d76:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000d78:	4a08      	ldr	r2, [pc, #32]	; (8000d9c <SystemInit+0x50>)
 8000d7a:	4b08      	ldr	r3, [pc, #32]	; (8000d9c <SystemInit+0x50>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d82:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000d84:	4b05      	ldr	r3, [pc, #20]	; (8000d9c <SystemInit+0x50>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000d8a:	f000 f80d 	bl	8000da8 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d8e:	4b05      	ldr	r3, [pc, #20]	; (8000da4 <SystemInit+0x58>)
 8000d90:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d94:	609a      	str	r2, [r3, #8]
#endif
}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40023800 	.word	0x40023800
 8000da0:	24003010 	.word	0x24003010
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000dae:	2300      	movs	r3, #0
 8000db0:	607b      	str	r3, [r7, #4]
 8000db2:	2300      	movs	r3, #0
 8000db4:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000db6:	4a35      	ldr	r2, [pc, #212]	; (8000e8c <SetSysClock+0xe4>)
 8000db8:	4b34      	ldr	r3, [pc, #208]	; (8000e8c <SetSysClock+0xe4>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dc0:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000dc2:	4b32      	ldr	r3, [pc, #200]	; (8000e8c <SetSysClock+0xe4>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dca:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	3301      	adds	r3, #1
 8000dd0:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d103      	bne.n	8000de0 <SetSysClock+0x38>
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000dde:	d1f0      	bne.n	8000dc2 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000de0:	4b2a      	ldr	r3, [pc, #168]	; (8000e8c <SetSysClock+0xe4>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d002      	beq.n	8000df2 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000dec:	2301      	movs	r3, #1
 8000dee:	603b      	str	r3, [r7, #0]
 8000df0:	e001      	b.n	8000df6 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000df2:	2300      	movs	r3, #0
 8000df4:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	2b01      	cmp	r3, #1
 8000dfa:	d142      	bne.n	8000e82 <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000dfc:	4a23      	ldr	r2, [pc, #140]	; (8000e8c <SetSysClock+0xe4>)
 8000dfe:	4b23      	ldr	r3, [pc, #140]	; (8000e8c <SetSysClock+0xe4>)
 8000e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e06:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8000e08:	4a21      	ldr	r2, [pc, #132]	; (8000e90 <SetSysClock+0xe8>)
 8000e0a:	4b21      	ldr	r3, [pc, #132]	; (8000e90 <SetSysClock+0xe8>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e12:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000e14:	4a1d      	ldr	r2, [pc, #116]	; (8000e8c <SetSysClock+0xe4>)
 8000e16:	4b1d      	ldr	r3, [pc, #116]	; (8000e8c <SetSysClock+0xe4>)
 8000e18:	689b      	ldr	r3, [r3, #8]
 8000e1a:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000e1c:	4a1b      	ldr	r2, [pc, #108]	; (8000e8c <SetSysClock+0xe4>)
 8000e1e:	4b1b      	ldr	r3, [pc, #108]	; (8000e8c <SetSysClock+0xe4>)
 8000e20:	689b      	ldr	r3, [r3, #8]
 8000e22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e26:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000e28:	4a18      	ldr	r2, [pc, #96]	; (8000e8c <SetSysClock+0xe4>)
 8000e2a:	4b18      	ldr	r3, [pc, #96]	; (8000e8c <SetSysClock+0xe4>)
 8000e2c:	689b      	ldr	r3, [r3, #8]
 8000e2e:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000e32:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000e34:	4b15      	ldr	r3, [pc, #84]	; (8000e8c <SetSysClock+0xe4>)
 8000e36:	4a17      	ldr	r2, [pc, #92]	; (8000e94 <SetSysClock+0xec>)
 8000e38:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000e3a:	4a14      	ldr	r2, [pc, #80]	; (8000e8c <SetSysClock+0xe4>)
 8000e3c:	4b13      	ldr	r3, [pc, #76]	; (8000e8c <SetSysClock+0xe4>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e44:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000e46:	bf00      	nop
 8000e48:	4b10      	ldr	r3, [pc, #64]	; (8000e8c <SetSysClock+0xe4>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d0f9      	beq.n	8000e48 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000e54:	4b10      	ldr	r3, [pc, #64]	; (8000e98 <SetSysClock+0xf0>)
 8000e56:	f240 7205 	movw	r2, #1797	; 0x705
 8000e5a:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000e5c:	4a0b      	ldr	r2, [pc, #44]	; (8000e8c <SetSysClock+0xe4>)
 8000e5e:	4b0b      	ldr	r3, [pc, #44]	; (8000e8c <SetSysClock+0xe4>)
 8000e60:	689b      	ldr	r3, [r3, #8]
 8000e62:	f023 0303 	bic.w	r3, r3, #3
 8000e66:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000e68:	4a08      	ldr	r2, [pc, #32]	; (8000e8c <SetSysClock+0xe4>)
 8000e6a:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <SetSysClock+0xe4>)
 8000e6c:	689b      	ldr	r3, [r3, #8]
 8000e6e:	f043 0302 	orr.w	r3, r3, #2
 8000e72:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000e74:	bf00      	nop
 8000e76:	4b05      	ldr	r3, [pc, #20]	; (8000e8c <SetSysClock+0xe4>)
 8000e78:	689b      	ldr	r3, [r3, #8]
 8000e7a:	f003 030c 	and.w	r3, r3, #12
 8000e7e:	2b08      	cmp	r3, #8
 8000e80:	d1f9      	bne.n	8000e76 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8000e82:	bf00      	nop
 8000e84:	370c      	adds	r7, #12
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bc80      	pop	{r7}
 8000e8a:	4770      	bx	lr
 8000e8c:	40023800 	.word	0x40023800
 8000e90:	40007000 	.word	0x40007000
 8000e94:	07405419 	.word	0x07405419
 8000e98:	40023c00 	.word	0x40023c00

08000e9c <__libc_init_array>:
 8000e9c:	b570      	push	{r4, r5, r6, lr}
 8000e9e:	4e0d      	ldr	r6, [pc, #52]	; (8000ed4 <__libc_init_array+0x38>)
 8000ea0:	4c0d      	ldr	r4, [pc, #52]	; (8000ed8 <__libc_init_array+0x3c>)
 8000ea2:	1ba4      	subs	r4, r4, r6
 8000ea4:	10a4      	asrs	r4, r4, #2
 8000ea6:	2500      	movs	r5, #0
 8000ea8:	42a5      	cmp	r5, r4
 8000eaa:	d109      	bne.n	8000ec0 <__libc_init_array+0x24>
 8000eac:	4e0b      	ldr	r6, [pc, #44]	; (8000edc <__libc_init_array+0x40>)
 8000eae:	4c0c      	ldr	r4, [pc, #48]	; (8000ee0 <__libc_init_array+0x44>)
 8000eb0:	f000 f818 	bl	8000ee4 <_init>
 8000eb4:	1ba4      	subs	r4, r4, r6
 8000eb6:	10a4      	asrs	r4, r4, #2
 8000eb8:	2500      	movs	r5, #0
 8000eba:	42a5      	cmp	r5, r4
 8000ebc:	d105      	bne.n	8000eca <__libc_init_array+0x2e>
 8000ebe:	bd70      	pop	{r4, r5, r6, pc}
 8000ec0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000ec4:	4798      	blx	r3
 8000ec6:	3501      	adds	r5, #1
 8000ec8:	e7ee      	b.n	8000ea8 <__libc_init_array+0xc>
 8000eca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000ece:	4798      	blx	r3
 8000ed0:	3501      	adds	r5, #1
 8000ed2:	e7f2      	b.n	8000eba <__libc_init_array+0x1e>
 8000ed4:	08000efc 	.word	0x08000efc
 8000ed8:	08000efc 	.word	0x08000efc
 8000edc:	08000efc 	.word	0x08000efc
 8000ee0:	08000f00 	.word	0x08000f00

08000ee4 <_init>:
 8000ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ee6:	bf00      	nop
 8000ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000eea:	bc08      	pop	{r3}
 8000eec:	469e      	mov	lr, r3
 8000eee:	4770      	bx	lr

08000ef0 <_fini>:
 8000ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ef2:	bf00      	nop
 8000ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ef6:	bc08      	pop	{r3}
 8000ef8:	469e      	mov	lr, r3
 8000efa:	4770      	bx	lr
